apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: stage-kafka-cluster
  namespace: staging
spec:
  kafka:
    version: 2.8.0
    replicas: 3
    # resources:
      # requests: {}
      #   memory: 2Gi
      #   cpu: "100m"
      # limits:
      #   memory: 4Gi
      #   cpu: "2000m"
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
      - name: external
        port: 9094
        type: nodeport
        tls: false
        configuration:
          bootstrap:
            nodePort: 31000
          brokers:
            - broker: 0
              nodePort: 31001
              advertisedHost: XX.XX.XX.XX
            - broker: 1
              nodePort: 31002
              advertisedHost: XX.XX.XX.XX
            - broker: 2
              nodePort: 31003
              advertisedHost: XX.XX.XX.XX
            - broker: 3
              nodePort: 31004
              advertisedHost: XX.XX.XX.XX
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    config:
      auto.create.topics.enable: "false"
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      log.message.format.version: "2.8"
      inter.broker.protocol.version: "2.8"
    storage:
      type: ephemeral
    # metricsConfig:
    #   type: jmxPrometheusExporter
    #   valueFrom:
    #     configMapKeyRef:
    #       name: stage-kafka-cluster-metrics
    #       key: stage-kafka-cluster-metrics-config.yml
  zookeeper:
    replicas: 3
    # resources: {}
      # requests:
      #   memory: 1Gi
      #   cpu: "200m"
      # limits:
      #   memory: 2Gi
      #   cpu: "1000m"
    storage:
      type: ephemeral
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    # metricsConfig:
    #   type: jmxPrometheusExporter
    #   valueFrom:
    #     configMapKeyRef:
    #       name: stage-kafka-cluster-metrics
    #       key: stage-kafka-cluster-zookeeper-metrics-config.yml
  entityOperator:
    topicOperator: {}
    userOperator: {}
  # kafkaExporter:
  #   topicRegex: ".*"
  #   groupRegex: ".*"

# ---
# kind: ConfigMap
# apiVersion: v1
# metadata:
#   name: stage-kafka-cluster-metrics
#   labels:
#     app: strimzi
# data:
#   stage-kafka-cluster-metrics-config.yml: |
#     # See https://github.com/prometheus/jmx_exporter for more info about JMX Prometheus Exporter metrics
#     lowercaseOutputName: true
#     rules:
#     # Special cases and very specific rules
#     - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
#       name: kafka_server_$1_$2
#       type: GAUGE
#       labels:
#        clientId: "$3"
#        topic: "$4"
#        partition: "$5"
#     - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
#       name: kafka_server_$1_$2
#       type: GAUGE
#       labels:
#        clientId: "$3"
#        broker: "$4:$5"
#     - pattern: kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections
#       name: kafka_server_$1_connections_tls_info
#       type: GAUGE
#       labels:
#         listener: "$2"
#         networkProcessor: "$3"
#         protocol: "$4"
#         cipher: "$5"
#     - pattern: kafka.server<type=(.+), clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
#       name: kafka_server_$1_connections_software
#       type: GAUGE
#       labels:
#         clientSoftwareName: "$2"
#         clientSoftwareVersion: "$3"
#         listener: "$4"
#         networkProcessor: "$5"
#     - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):"
#       name: kafka_server_$1_$4
#       type: GAUGE
#       labels:
#        listener: "$2"
#        networkProcessor: "$3"
#     - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)
#       name: kafka_server_$1_$4
#       type: GAUGE
#       labels:
#        listener: "$2"
#        networkProcessor: "$3"
#     # Some percent metrics use MeanRate attribute
#     # Ex) kafka.server<type=(KafkaRequestHandlerPool), name=(RequestHandlerAvgIdlePercent)><>MeanRate
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>MeanRate
#       name: kafka_$1_$2_$3_percent
#       type: GAUGE
#     # Generic gauges for percents
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>Value
#       name: kafka_$1_$2_$3_percent
#       type: GAUGE
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*, (.+)=(.+)><>Value
#       name: kafka_$1_$2_$3_percent
#       type: GAUGE
#       labels:
#         "$4": "$5"
#     # Generic per-second counters with 0-2 key/value pairs
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
#       name: kafka_$1_$2_$3_total
#       type: COUNTER
#       labels:
#         "$4": "$5"
#         "$6": "$7"
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
#       name: kafka_$1_$2_$3_total
#       type: COUNTER
#       labels:
#         "$4": "$5"
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
#       name: kafka_$1_$2_$3_total
#       type: COUNTER
#     # Generic gauges with 0-2 key/value pairs
#     - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
#       name: kafka_$1_$2_$3
#       type: GAUGE
#       labels:
#         "$4": "$5"
#         "$6": "$7"
#     - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
#       name: kafka_$1_$2_$3
#       type: GAUGE
#       labels:
#         "$4": "$5"
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
#       name: kafka_$1_$2_$3
#       type: GAUGE
#     # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
#     # Note that these are missing the '_sum' metric!
#     - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
#       name: kafka_$1_$2_$3_count
#       type: COUNTER
#       labels:
#         "$4": "$5"
#         "$6": "$7"
#     - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
#       name: kafka_$1_$2_$3
#       type: GAUGE
#       labels:
#         "$4": "$5"
#         "$6": "$7"
#         quantile: "0.$8"
#     - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
#       name: kafka_$1_$2_$3_count
#       type: COUNTER
#       labels:
#         "$4": "$5"
#     - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
#       name: kafka_$1_$2_$3
#       type: GAUGE
#       labels:
#         "$4": "$5"
#         quantile: "0.$6"
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
#       name: kafka_$1_$2_$3_count
#       type: COUNTER
#     - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
#       name: kafka_$1_$2_$3
#       type: GAUGE
#       labels:
#         quantile: "0.$4"
#   stage-kafka-cluster-zookeeper-metrics-config.yml: |
#     # See https://github.com/prometheus/jmx_exporter for more info about JMX Prometheus Exporter metrics
#     lowercaseOutputName: true
#     rules:
#     # replicated Zookeeper
#     - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
#       name: "zookeeper_$2"
#       type: GAUGE
#     - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+)><>(\\w+)"
#       name: "zookeeper_$3"
#       type: GAUGE
#       labels:
#         replicaId: "$2"
#     - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(Packets\\w+)"
#       name: "zookeeper_$4"
#       type: COUNTER
#       labels:
#         replicaId: "$2"
#         memberType: "$3"
#     - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(\\w+)"
#       name: "zookeeper_$4"
#       type: GAUGE
#       labels:
#         replicaId: "$2"
#         memberType: "$3"
#     - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
#       name: "zookeeper_$4_$5"
#       type: GAUGE
#       labels:
#         replicaId: "$2"
#         memberType: "$3"
