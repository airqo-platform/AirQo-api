name: deploy-apis-to-staging

on:
  pull_request:
    branches: 
      - staging
    types:
      - closed

jobs:
  image-tag:
    name: create image tag
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.prep.outputs.build_id }} # build id
      datetime: ${{ steps.prep.outputs.datetime }} # build date
    steps:
      - name: generate build ID
        id: prep
        run: |
            sha=${GITHUB_SHA::8}
            timestamp=$(date +%s)
            datetime=$(date)
            echo "::set-output name=build_id::stage-${sha}-${timestamp}"
            echo "::set-output name=datetime::${datetime}"

  check:
    if: github.event.pull_request.merged == true
    #if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    name: check changed microservice(s)
    outputs:
      run_auth_service: ${{ steps.check_files.outputs.run_auth_service }} # auth service
      run_device_registry: ${{ steps.check_files.outputs.run_device_registry }} # device registry
      run_device_monitoring: ${{ steps.check_files.outputs.run_device_monitoring }} # device monitoring
      run_data_mgt: ${{ steps.check_files.outputs.run_data_mgt }} # data mgt
      run_analytics: ${{ steps.check_files.outputs.run_analytics }} # analytics
      run_device_uptime: ${{ steps.check_files.outputs.run_device_uptime }} # device uptime
      run_device_status: ${{ steps.check_files.outputs.run_device_status }} # device status
      run_locate: ${{ steps.check_files.outputs.run_locate }} # locate
      run_predict: ${{ steps.check_files.outputs.run_predict }} # predict
      run_gp_model: ${{ steps.check_files.outputs.run_gp_model }} # gp_model
      run_exceedances: ${{ steps.check_files.outputs.run_exceedances }} # exceedances
      run_datawarehouse: ${{ steps.check_files.outputs.run_datawarehouse }} # datawarehouse
      run_view: ${{ steps.check_files.outputs.run_view }} # view
      run_calibrate: ${{ steps.check_files.outputs.run_calibrate }} # calibrate
      run_average_jobs: ${{ steps.check_files.outputs.run_average_jobs }} # average and calibration jobs
      run_events_check: ${{ steps.check_files.outputs.run_events_check }} # event checks
      run_notifications: ${{ steps.check_files.outputs.run_notifications }} # notification
      run_airflow: ${{ steps.check_files.outputs.run_airflow }} # airflow
      run_channel_data: ${{ steps.check_files.outputs.run_channel_data }} # channel data job

    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

        #### all microservices ######
      - name: check modified microserivce
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          
          echo "::set-output name=run_auth_service::false"
          echo "::set-output name=run_device_registry::false"  
          echo "::set-output name=run_device_monitoring::false" 
          echo "::set-output name=run_data_mgt::false"
          echo "::set-output name=run_analytics::false"
          echo "::set-output name=run_device_uptime::false"  
          echo "::set-output name=run_device_status::false" 
          echo "::set-output name=run_locate::false"
          echo "::set-output name=run_predict::false"
          echo "::set-output name=run_gp_model::false"
          echo "::set-output name=run_exceedances::false"
          echo "::set-output name=run_datawarehouse::false"
          echo "::set-output name=run_view::false"
          echo "::set-output name=run_calibrate::false" 
          echo "::set-output name=run_average_jobs::false"
          echo "::set-output name=run_events_check::false"
          echo "::set-output name=run_notifications::false"
          echo "::set-output name=run_airflow::false"
          echo "::set-output name=run_channel_data::false"

          while IFS= read -r file
          do
            echo $file
            if [[ $file == src/auth-service/* ]]; then
              echo "::set-output name=run_auth_service::true"
            fi

            if [[ $file == src/device-registry/* ]]; then
              echo "::set-output name=run_device_registry::true"
            fi

            if [[ $file == src/device-monitoring/* ]]; then
              echo "::set-output name=run_device_monitoring::true"
            fi

            if [[ $file == src/data-mgt/node/* ]]; then
              echo "::set-output name=run_data_mgt::true"
            fi

            if [[ $file == src/analytics/* ]]; then
              echo "::set-output name=run_analytics::true"
            fi

            if [[ $file == src/device-uptime/* ]]; then
              echo "::set-output name=run_device_uptime::true"
            fi

            if [[ $file == src/device-status/* ]]; then
              echo "::set-output name=run_device_status::true"
            fi

            if [[ $file == src/locate/* ]]; then
              echo "::set-output name=run_locate::true"
            fi

            if [[ $file == src/predict/* ]]; then
              echo "::set-output name=run_predict::true"
            fi

            if [[ $file == src/predict-job/* ]]; then
              echo "::set-output name=run_predict::true"
            fi

            if [[ $file == src/gp-model/* ]]; then
              echo "::set-output name=run_gp_model::true"
            fi

            if [[ $file == src/exceedances/* ]]; then
              echo "::set-output name=run_exceedances::true"
            fi

            if [[ $file == src/data-mgt/python/extract-external-data/* ]]; then
              echo "::set-output name=run_datawarehouse::true"
            fi

            if [[ $file == src/view/* ]]; then
              echo "::set-output name=run_view::true"
            fi
            
            if [[ $file == src/calibrate/* ]]; then
              echo "::set-output name=run_calibrate::true"
            fi
            
            if [[ $file == src/data-mgt/python/cron-jobs/* ]]; then
              echo "::set-output name=run_average_jobs::true"
            fi

            if [[ $file == src/data-mgt/python/events-monitor/* ]]; then
              echo "::set-output name=run_events_check::true"
            fi

            if [[ $file == src/notifications/* ]]; then
              echo "::set-output name=run_notifications::true"
            fi

            if [[ $file == src/airflow/* ]]; then
              echo "::set-output name=run_airflow::true"
            fi

            if [[ $file == src/channel-data/* ]]; then
              echo "::set-output name=run_channel_data::true"
            fi

            if [[ $file == workflow-trigger ]]; then
              echo "::set-output name=run_notifications::true"
              echo "::set-output name=run_events_check::true"
              echo "::set-output name=run_calibrate::true"
              echo "::set-output name=run_average_jobs::true"
              echo "::set-output name=run_datawarehouse::true"
              echo "::set-output name=run_exceedances::true"
              echo "::set-output name=run_gp_model::true"
              echo "::set-output name=run_predict::true"
              echo "::set-output name=run_locate::true"
              echo "::set-output name=run_device_status::true"
              echo "::set-output name=run_device_uptime::true"
              echo "::set-output name=run_analytics::true"
              echo "::set-output name=run_data_mgt::true"
              echo "::set-output name=run_device_monitoring::true"
              echo "::set-output name=run_device_registry::true"
              echo "::set-output name=run_auth_service::true"
              echo "::set-output name=run_airflow::true"
              echo "::set-output name=run_channel_data::true"
            fi

          done < files.txt


  ### auth service ###
  auth-service:
    name: build-push-deploy-auth
    needs: [check, image-tag]
    if: needs.check.outputs.run_auth_service == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/auth-service/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-auth-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-auth-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-auth-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-auth-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-auth-api:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/auth-service/stage-auth-api.yaml
          kubectl set image deployment/airqo-stage-auth-api sta-auth-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-auth-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-auth-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-auth-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging

  ### airflow ###
  airflow:
    name: build-push-deploy-airflow
    needs: [check, image-tag]
    if: needs.check.outputs.run_airflow == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}
      - 
        name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_PIPELINE_CONFIG }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/airflow
          target: deployment
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-apache-airflow:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-apache-airflow:latest

      # - name: Deploy to K8S
      #   uses: Azure/k8s-deploy@v1.4
      #   with:
      #     namespace: "stage-airflow"
      #     manifests: |
      #       k8s/airflow/stage-airflow-app.yaml
      #     images: "${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-apache-airflow:${{ needs.image-tag.outputs.build_id }}"
      #     kubectl-version: "latest"
      
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/airflow/stage-airflow-app.yaml -n stage-airflow
          kubectl rollout restart deployment airflow  -n stage-airflow

  ### predict api and job ###
  predict-service:
    name: build-push-deploy-predict-api
    needs: [check, image-tag]
    if: needs.check.outputs.run_predict == 'true'
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}
      - 
        name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      -
        name: Build and push API Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/predict
          target: staging
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-prediction-api:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-prediction-api:latest
      -
        name: Build and push Job Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/predict-job
          target: staging
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-predict-job:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-predict-job:latest
      - 
        name: Deploy to K8S
        run: |
          kubectl apply -f k8s/predict/stage-prediction-api.yaml -n staging
          kubectl rollout restart deployment airqo-stage-prediction-api  -n staging
          kubectl apply -f k8s/predict/stage-airqo-predict-job.yaml -n staging

  #### Device Registry ######
  device-registry:
    name: build-push-deploy-device-registry
    needs: [check, image-tag]
    if: needs.check.outputs.run_device_registry == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/device-registry/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-registry-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-registry-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-registry-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-registry-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-registry-api:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/device-registry/stage-device-registry-api.yaml -n staging
          kubectl set image deployment/airqo-stage-device-registry-api sta-dev-reg-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-registry-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-device-registry-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-registry-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging

  ### device monitoring ###
  device-monitoring:
    name: build-push-deploy-device-monitoring
    needs: [check, image-tag]
    if: needs.check.outputs.run_device_monitoring == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/device-monitoring/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-monitor-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-monitor-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-monitor-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-monitor-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-monitor-api:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/device-monitor/stage-device-monitor-api.yaml -n staging
          kubectl set image deployment/airqo-stage-device-monitor-api sta-dev-monitor=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-monitor-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-device-monitor-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-monitor-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging
  
  ### data-mgt ###
  data-mgt:
    name: build-push-deploy-data-mgt
    needs: check
    if: needs.check.outputs.run_data_mgt == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/data-mgt/node/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-data-mgt-api:latest -f Dockerfile.stage .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-data-mgt-api:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/data-mgt/stage-data-mgt-api.yaml -n staging
          kubectl rollout restart deployment/airqo-stage-data-mgt-api -n staging
  
  ### analytics ###
  analytics:
    name: build-push-deploy-analytics
    needs: [check, image-tag]
    if: needs.check.outputs.run_analytics == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/analytics/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-analytics-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-analytics-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-analytics-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-analytics-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-analytics-api:latest

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/analytics/stage-analytics-api.yaml -n staging
          kubectl set image deployment/airqo-stage-analytics-api sta-alytics-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-analytics-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-analytics-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-analytics-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging
  
  ### device uptime ###
  device-uptime:
    name: build-push-deploy-device-uptime
    needs: check
    if: needs.check.outputs.run_device_uptime == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/device-uptime/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-uptime-job:latest -f Dockerfile.stage .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-uptime-job:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/device-uptime/stage-airqo-device-uptime-job.yaml
  
  ### device status ###
  device-status:
    name: build-push-deploy-device-status
    needs: check
    if: needs.check.outputs.run_device_status == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/device-status/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-status-job:latest -f Dockerfile.stage .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-device-status-job:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/device-status/stage-airqo-device-status-job.yaml

  ### locate ###
  locate:
    name: build-push-deploy-locate
    needs: [check, image-tag]
    if: needs.check.outputs.run_locate == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/locate/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-locate-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-locate-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-locate-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-locate-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-locate-api:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/locate/stage-locate-api.yaml -n staging
          kubectl set image deployment/airqo-stage-locate-api sta-locate-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-locate-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-locate-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-locate-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging
  
  ### gp model ###
  gp-model:
    name: build-push-deploy-gp-model
    needs: check
    if: needs.check.outputs.run_gp_model == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/gp-model/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-gp-model-job:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-gp-model-job:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/gp-model/stage-airqo-gp-model-job.yaml
  
  ### exceddences ###
  exceedance:
    name: build-push-deploy-exceedances
    needs: check
    if: needs.check.outputs.run_exceedances == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/exceedances/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/stage-airqo-exceedance-job:latest -f Dockerfile.stage.airqo .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/stage-airqo-exceedance-job:latest

          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/stage-kcca-exceedance-job:latest -f Dockerfile.stage.kcca .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/stage-kcca-exceedance-job:latest
      - name: Deploy to K8S
        run: |
          cd k8s/exceedance/
          kubectl apply -f stage-airqo-exceedance-job.yaml
          kubectl apply -f stage-kcca-exceedance-job.yaml

  ### datawarehouse ###
  datawarehouse:
    name: build-push-deploy-datawarehouse
    needs: [check, image-tag]
    if: needs.check.outputs.run_datawarehouse == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/data-mgt/python/extract-external-data/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-datawarehouse-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-datawarehouse-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-datawarehouse-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-datawarehouse-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-datawarehouse-api:latest

      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/data-warehouse/stage-data-warehouse-api.yaml
          kubectl set image deployment/airqo-stage-datawarehouse-api datawarehouse=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-datawarehouse-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-datawarehouse-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-datawarehouse-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging
  
  ### view  ###
  view:
    name: build-push-deploy-view
    needs: [check, image-tag]
    if: needs.check.outputs.run_view == 'true'
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}
      - 
        name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      -
        name: Build and push API
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-view-api:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-view-api:latest
          target: api
          context: src/view
      -
        name: Build and push Message Broker
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-view-message-broker:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-view-message-broker:latest
          target: message-broker
          context: src/view

      - name: Deploy API to K8S
        run: |
          kubectl apply -f k8s/view-api/stage-view-api.yaml -n staging
          kubectl rollout restart deployment airqo-stage-view-api  -n staging

      - name: Deploy Message Broker to K8S
        run: |
          kubectl apply -f k8s/view-api/stage-view-message-broker.yaml -n staging
          kubectl rollout restart deployment airqo-stage-view-message-broker  -n staging

  #### Calibrate ######
  calibrate:
    name: build-push-deploy-calibrate
    needs: [check, image-tag]
    if: needs.check.outputs.run_calibrate == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}
      -
        name: Build and push calibrate API
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/calibrate
          target: staging
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-api:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-api:latest
      -
        name: Build and push calibrate pickle file
        uses: docker/build-push-action@v2
        with:
          push: true
          context: src/calibrate
          target: pickle-file
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-pickle-file:${{ needs.image-tag.outputs.build_id }},${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-pickle-file:latest
      - 
        name: Login to Main k8s cluster
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      - 
        name: Deploy to Main k8s cluster
        run: |
          kubectl apply -f k8s/calibrate/stage-calibrate-api.yaml -n staging
          kubectl set image deployment/airqo-stage-calibrate-api calibrate-pickle=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-pickle-file:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl set image deployment/airqo-stage-calibrate-api sta-calibrate=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-calibrate-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging
      -
        name: Login to Pipeline k8s cluster
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_PIPELINE_CONFIG }}
      - 
        name: Deploy to Pipeline k8s cluster
        run: |
          kubectl apply -f k8s/calibrate/stage-calibrate-api.yaml -n staging
          kubectl set image deployment/airqo-stage-calibrate-api calibrate-pickle=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-pickle-file:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl set image deployment/airqo-stage-calibrate-api sta-calibrate=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-calibrate-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-calibrate-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging

  ### events check ###
  events-check:
    name: build-push-events-check
    needs: [check, image-tag]
    if: needs.check.outputs.run_events_check == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/data-mgt/python/events-monitor/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-events-notifs-job:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-events-notifs-job:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/events-monitor/stage-events-notifs-cronjob.yaml -n staging

  #### notification ######
  notification:
    name: build-push-deploy-notification
    needs: [check, image-tag]
    if: needs.check.outputs.run_notifications == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ### run unit tests ###
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/notifications/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-notification-api:${{ needs.image-tag.outputs.build_id }} .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-notification-api:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-notification-api:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-notification-api:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-notification-api:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/notification-service/stage-notification-api.yaml
          kubectl set image deployment/airqo-stage-notification-api sta-notification-api=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-notification-api:${{ needs.image-tag.outputs.build_id }} -n staging
          kubectl annotate deployment/airqo-stage-notification-api kubernetes.io/change-cause="Image updated to ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-notification-api:${{ needs.image-tag.outputs.build_id }} on ${{ needs.image-tag.outputs.datetime }}" -n staging

  #### Channel data ######
  channel-data:
    name: build-push-deploy-channel-data-job
    needs: [check, image-tag]
    if: needs.check.outputs.run_channel_data == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_STAGE }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/channel-data/
          docker build --target=staging --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-update-channel-data-job:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-stage-update-channel-data-job:latest
      - name: Deploy to K8S
        run: |
          kubectl apply -f k8s/channel-data/stage-airqo-update-channel-data-job.yaml -n staging
