#!/usr/bin/env node

const app = require("../app");
const constants = require("../config/constants");
const middlewareConfig = require("../config/app.middleware");
const debug = require('debug')('log4js-example');
const cluster = require('express-cluster');
const http = require("http");
const isEmpty = require("is-empty");
const log4js = require('log4js');
const log4jsConfiguration = require("../config/log4js")
log4js.configure(log4jsConfiguration);
const logger = log4js.getLogger("start-script");
const server = http.createServer(app);


/***
 *  make a log directory, just in case it isn't there.
 */

try {
    require('fs').mkdirSync('./log');
} catch (e) {
    if (e.code != 'EEXIST') {
        console.error("Could not set up log directory, error was: ", e);
        process.exit(1);
    }
}

/****
 * pass the app instance to the middleware configuration
 */
try {
    middlewareConfig(app);
} catch (e) {
    console.log("middleware error", e.message);
}

/***
 * start up a cluster
 */

cluster(function() {
    //Get port from environment and store in Express.
    const port = normalizePort(constants.PORT);
    app.set("port", port);
    //Create HTTP server.
    //Listen on provided port, on all network interfaces.
    server.listen(port, function() {
        logger.info('Express server listening on port ', server.address().port, " with pid ", process.pid);
    });
    server.on("error", onError);
    server.on("listening", onListening);
}, {
    count: 1,
    respawn: false,
    verbose: false,
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

let ENV = "";
if (isEmpty(process.env.NODE_ENV)) {
    ENV = "production";
} else {
    ENV = process.env.NODE_ENV;
}

function onListening() {
    console.log(`server is running on port: ${constants.PORT} ---
Running on ${ENV}`);
    const addr = server.address();
    const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}