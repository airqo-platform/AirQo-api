/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package airqo.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Measurement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1898160465552419934L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Measurement\",\"namespace\":\"airqo.models\",\"fields\":[{\"name\":\"frequency\",\"type\":{\"type\":\"enum\",\"name\":\"frequency\",\"symbols\":[\"hourly\",\"daily\",\"raw\"],\"default\":\"raw\"},\"aliases\":[\"average\"]},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"device\",\"type\":\"string\"},{\"name\":\"device_id\",\"type\":\"string\"},{\"name\":\"site_id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"device_number\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"tenant\",\"type\":{\"type\":\"enum\",\"name\":\"tenant\",\"symbols\":[\"airqo\",\"kcca\"]}},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"location\",\"fields\":[{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"internalTemperature\",\"type\":{\"type\":\"record\",\"name\":\"internalTemperature\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"internalHumidity\",\"type\":{\"type\":\"record\",\"name\":\"internalHumidity\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"externalTemperature\",\"type\":{\"type\":\"record\",\"name\":\"externalTemperature\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"externalHumidity\",\"type\":{\"type\":\"record\",\"name\":\"externalHumidity\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"externalPressure\",\"type\":{\"type\":\"record\",\"name\":\"externalPressure\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"pm10\",\"type\":{\"type\":\"record\",\"name\":\"pm10\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"uncertaintyValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardDeviationValue\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"pm2_5\",\"type\":{\"type\":\"record\",\"name\":\"pm2_5\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"uncertaintyValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardDeviationValue\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"no2\",\"type\":{\"type\":\"record\",\"name\":\"no2\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"uncertaintyValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardDeviationValue\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"pm1\",\"type\":{\"type\":\"record\",\"name\":\"pm1\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"uncertaintyValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardDeviationValue\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"speed\",\"type\":{\"type\":\"record\",\"name\":\"speed\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"altitude\",\"type\":{\"type\":\"record\",\"name\":\"altitude\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"battery\",\"type\":{\"type\":\"record\",\"name\":\"battery\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"satellites\",\"type\":{\"type\":\"record\",\"name\":\"satellites\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"hdop\",\"type\":{\"type\":\"record\",\"name\":\"hdop\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"s2_pm10\",\"type\":{\"type\":\"record\",\"name\":\"s2_pm10\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"uncertaintyValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardDeviationValue\",\"type\":[\"null\",\"double\"],\"default\":null}]}},{\"name\":\"s2_pm2_5\",\"type\":{\"type\":\"record\",\"name\":\"s2_pm2_5\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"uncertaintyValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"standardDeviationValue\",\"type\":[\"null\",\"double\"],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Measurement> ENCODER =
      new BinaryMessageEncoder<Measurement>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Measurement> DECODER =
      new BinaryMessageDecoder<Measurement>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Measurement> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Measurement> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Measurement> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Measurement>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Measurement to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Measurement from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Measurement instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Measurement fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private airqo.models.frequency frequency;
   private java.lang.CharSequence time;
   private java.lang.CharSequence device;
   private java.lang.CharSequence device_id;
   private java.lang.CharSequence site_id;
   private java.lang.Integer device_number;
   private airqo.models.tenant tenant;
   private airqo.models.location location;
   private airqo.models.internalTemperature internalTemperature;
   private airqo.models.internalHumidity internalHumidity;
   private airqo.models.externalTemperature externalTemperature;
   private airqo.models.externalHumidity externalHumidity;
   private airqo.models.externalPressure externalPressure;
   private airqo.models.pm10 pm10;
   private airqo.models.pm2_5 pm2_5;
   private airqo.models.no2 no2;
   private airqo.models.pm1 pm1;
   private airqo.models.speed speed;
   private airqo.models.altitude altitude;
   private airqo.models.battery battery;
   private airqo.models.satellites satellites;
   private airqo.models.hdop hdop;
   private airqo.models.s2_pm10 s2_pm10;
   private airqo.models.s2_pm2_5 s2_pm2_5;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Measurement() {}

  /**
   * All-args constructor.
   * @param frequency The new value for frequency
   * @param time The new value for time
   * @param device The new value for device
   * @param device_id The new value for device_id
   * @param site_id The new value for site_id
   * @param device_number The new value for device_number
   * @param tenant The new value for tenant
   * @param location The new value for location
   * @param internalTemperature The new value for internalTemperature
   * @param internalHumidity The new value for internalHumidity
   * @param externalTemperature The new value for externalTemperature
   * @param externalHumidity The new value for externalHumidity
   * @param externalPressure The new value for externalPressure
   * @param pm10 The new value for pm10
   * @param pm2_5 The new value for pm2_5
   * @param no2 The new value for no2
   * @param pm1 The new value for pm1
   * @param speed The new value for speed
   * @param altitude The new value for altitude
   * @param battery The new value for battery
   * @param satellites The new value for satellites
   * @param hdop The new value for hdop
   * @param s2_pm10 The new value for s2_pm10
   * @param s2_pm2_5 The new value for s2_pm2_5
   */
  public Measurement(airqo.models.frequency frequency, java.lang.CharSequence time, java.lang.CharSequence device, java.lang.CharSequence device_id, java.lang.CharSequence site_id, java.lang.Integer device_number, airqo.models.tenant tenant, airqo.models.location location, airqo.models.internalTemperature internalTemperature, airqo.models.internalHumidity internalHumidity, airqo.models.externalTemperature externalTemperature, airqo.models.externalHumidity externalHumidity, airqo.models.externalPressure externalPressure, airqo.models.pm10 pm10, airqo.models.pm2_5 pm2_5, airqo.models.no2 no2, airqo.models.pm1 pm1, airqo.models.speed speed, airqo.models.altitude altitude, airqo.models.battery battery, airqo.models.satellites satellites, airqo.models.hdop hdop, airqo.models.s2_pm10 s2_pm10, airqo.models.s2_pm2_5 s2_pm2_5) {
    this.frequency = frequency;
    this.time = time;
    this.device = device;
    this.device_id = device_id;
    this.site_id = site_id;
    this.device_number = device_number;
    this.tenant = tenant;
    this.location = location;
    this.internalTemperature = internalTemperature;
    this.internalHumidity = internalHumidity;
    this.externalTemperature = externalTemperature;
    this.externalHumidity = externalHumidity;
    this.externalPressure = externalPressure;
    this.pm10 = pm10;
    this.pm2_5 = pm2_5;
    this.no2 = no2;
    this.pm1 = pm1;
    this.speed = speed;
    this.altitude = altitude;
    this.battery = battery;
    this.satellites = satellites;
    this.hdop = hdop;
    this.s2_pm10 = s2_pm10;
    this.s2_pm2_5 = s2_pm2_5;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return frequency;
    case 1: return time;
    case 2: return device;
    case 3: return device_id;
    case 4: return site_id;
    case 5: return device_number;
    case 6: return tenant;
    case 7: return location;
    case 8: return internalTemperature;
    case 9: return internalHumidity;
    case 10: return externalTemperature;
    case 11: return externalHumidity;
    case 12: return externalPressure;
    case 13: return pm10;
    case 14: return pm2_5;
    case 15: return no2;
    case 16: return pm1;
    case 17: return speed;
    case 18: return altitude;
    case 19: return battery;
    case 20: return satellites;
    case 21: return hdop;
    case 22: return s2_pm10;
    case 23: return s2_pm2_5;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: frequency = (airqo.models.frequency)value$; break;
    case 1: time = (java.lang.CharSequence)value$; break;
    case 2: device = (java.lang.CharSequence)value$; break;
    case 3: device_id = (java.lang.CharSequence)value$; break;
    case 4: site_id = (java.lang.CharSequence)value$; break;
    case 5: device_number = (java.lang.Integer)value$; break;
    case 6: tenant = (airqo.models.tenant)value$; break;
    case 7: location = (airqo.models.location)value$; break;
    case 8: internalTemperature = (airqo.models.internalTemperature)value$; break;
    case 9: internalHumidity = (airqo.models.internalHumidity)value$; break;
    case 10: externalTemperature = (airqo.models.externalTemperature)value$; break;
    case 11: externalHumidity = (airqo.models.externalHumidity)value$; break;
    case 12: externalPressure = (airqo.models.externalPressure)value$; break;
    case 13: pm10 = (airqo.models.pm10)value$; break;
    case 14: pm2_5 = (airqo.models.pm2_5)value$; break;
    case 15: no2 = (airqo.models.no2)value$; break;
    case 16: pm1 = (airqo.models.pm1)value$; break;
    case 17: speed = (airqo.models.speed)value$; break;
    case 18: altitude = (airqo.models.altitude)value$; break;
    case 19: battery = (airqo.models.battery)value$; break;
    case 20: satellites = (airqo.models.satellites)value$; break;
    case 21: hdop = (airqo.models.hdop)value$; break;
    case 22: s2_pm10 = (airqo.models.s2_pm10)value$; break;
    case 23: s2_pm2_5 = (airqo.models.s2_pm2_5)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'frequency' field.
   * @return The value of the 'frequency' field.
   */
  public airqo.models.frequency getFrequency() {
    return frequency;
  }


  /**
   * Sets the value of the 'frequency' field.
   * @param value the value to set.
   */
  public void setFrequency(airqo.models.frequency value) {
    this.frequency = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.CharSequence getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.CharSequence value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'device' field.
   * @return The value of the 'device' field.
   */
  public java.lang.CharSequence getDevice() {
    return device;
  }


  /**
   * Sets the value of the 'device' field.
   * @param value the value to set.
   */
  public void setDevice(java.lang.CharSequence value) {
    this.device = value;
  }

  /**
   * Gets the value of the 'device_id' field.
   * @return The value of the 'device_id' field.
   */
  public java.lang.CharSequence getDeviceId() {
    return device_id;
  }


  /**
   * Sets the value of the 'device_id' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.device_id = value;
  }

  /**
   * Gets the value of the 'site_id' field.
   * @return The value of the 'site_id' field.
   */
  public java.lang.CharSequence getSiteId() {
    return site_id;
  }


  /**
   * Sets the value of the 'site_id' field.
   * @param value the value to set.
   */
  public void setSiteId(java.lang.CharSequence value) {
    this.site_id = value;
  }

  /**
   * Gets the value of the 'device_number' field.
   * @return The value of the 'device_number' field.
   */
  public java.lang.Integer getDeviceNumber() {
    return device_number;
  }


  /**
   * Sets the value of the 'device_number' field.
   * @param value the value to set.
   */
  public void setDeviceNumber(java.lang.Integer value) {
    this.device_number = value;
  }

  /**
   * Gets the value of the 'tenant' field.
   * @return The value of the 'tenant' field.
   */
  public airqo.models.tenant getTenant() {
    return tenant;
  }


  /**
   * Sets the value of the 'tenant' field.
   * @param value the value to set.
   */
  public void setTenant(airqo.models.tenant value) {
    this.tenant = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public airqo.models.location getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(airqo.models.location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'internalTemperature' field.
   * @return The value of the 'internalTemperature' field.
   */
  public airqo.models.internalTemperature getInternalTemperature() {
    return internalTemperature;
  }


  /**
   * Sets the value of the 'internalTemperature' field.
   * @param value the value to set.
   */
  public void setInternalTemperature(airqo.models.internalTemperature value) {
    this.internalTemperature = value;
  }

  /**
   * Gets the value of the 'internalHumidity' field.
   * @return The value of the 'internalHumidity' field.
   */
  public airqo.models.internalHumidity getInternalHumidity() {
    return internalHumidity;
  }


  /**
   * Sets the value of the 'internalHumidity' field.
   * @param value the value to set.
   */
  public void setInternalHumidity(airqo.models.internalHumidity value) {
    this.internalHumidity = value;
  }

  /**
   * Gets the value of the 'externalTemperature' field.
   * @return The value of the 'externalTemperature' field.
   */
  public airqo.models.externalTemperature getExternalTemperature() {
    return externalTemperature;
  }


  /**
   * Sets the value of the 'externalTemperature' field.
   * @param value the value to set.
   */
  public void setExternalTemperature(airqo.models.externalTemperature value) {
    this.externalTemperature = value;
  }

  /**
   * Gets the value of the 'externalHumidity' field.
   * @return The value of the 'externalHumidity' field.
   */
  public airqo.models.externalHumidity getExternalHumidity() {
    return externalHumidity;
  }


  /**
   * Sets the value of the 'externalHumidity' field.
   * @param value the value to set.
   */
  public void setExternalHumidity(airqo.models.externalHumidity value) {
    this.externalHumidity = value;
  }

  /**
   * Gets the value of the 'externalPressure' field.
   * @return The value of the 'externalPressure' field.
   */
  public airqo.models.externalPressure getExternalPressure() {
    return externalPressure;
  }


  /**
   * Sets the value of the 'externalPressure' field.
   * @param value the value to set.
   */
  public void setExternalPressure(airqo.models.externalPressure value) {
    this.externalPressure = value;
  }

  /**
   * Gets the value of the 'pm10' field.
   * @return The value of the 'pm10' field.
   */
  public airqo.models.pm10 getPm10() {
    return pm10;
  }


  /**
   * Sets the value of the 'pm10' field.
   * @param value the value to set.
   */
  public void setPm10(airqo.models.pm10 value) {
    this.pm10 = value;
  }

  /**
   * Gets the value of the 'pm2_5' field.
   * @return The value of the 'pm2_5' field.
   */
  public airqo.models.pm2_5 getPm25() {
    return pm2_5;
  }


  /**
   * Sets the value of the 'pm2_5' field.
   * @param value the value to set.
   */
  public void setPm25(airqo.models.pm2_5 value) {
    this.pm2_5 = value;
  }

  /**
   * Gets the value of the 'no2' field.
   * @return The value of the 'no2' field.
   */
  public airqo.models.no2 getNo2() {
    return no2;
  }


  /**
   * Sets the value of the 'no2' field.
   * @param value the value to set.
   */
  public void setNo2(airqo.models.no2 value) {
    this.no2 = value;
  }

  /**
   * Gets the value of the 'pm1' field.
   * @return The value of the 'pm1' field.
   */
  public airqo.models.pm1 getPm1() {
    return pm1;
  }


  /**
   * Sets the value of the 'pm1' field.
   * @param value the value to set.
   */
  public void setPm1(airqo.models.pm1 value) {
    this.pm1 = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public airqo.models.speed getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(airqo.models.speed value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'altitude' field.
   * @return The value of the 'altitude' field.
   */
  public airqo.models.altitude getAltitude() {
    return altitude;
  }


  /**
   * Sets the value of the 'altitude' field.
   * @param value the value to set.
   */
  public void setAltitude(airqo.models.altitude value) {
    this.altitude = value;
  }

  /**
   * Gets the value of the 'battery' field.
   * @return The value of the 'battery' field.
   */
  public airqo.models.battery getBattery() {
    return battery;
  }


  /**
   * Sets the value of the 'battery' field.
   * @param value the value to set.
   */
  public void setBattery(airqo.models.battery value) {
    this.battery = value;
  }

  /**
   * Gets the value of the 'satellites' field.
   * @return The value of the 'satellites' field.
   */
  public airqo.models.satellites getSatellites() {
    return satellites;
  }


  /**
   * Sets the value of the 'satellites' field.
   * @param value the value to set.
   */
  public void setSatellites(airqo.models.satellites value) {
    this.satellites = value;
  }

  /**
   * Gets the value of the 'hdop' field.
   * @return The value of the 'hdop' field.
   */
  public airqo.models.hdop getHdop() {
    return hdop;
  }


  /**
   * Sets the value of the 'hdop' field.
   * @param value the value to set.
   */
  public void setHdop(airqo.models.hdop value) {
    this.hdop = value;
  }

  /**
   * Gets the value of the 's2_pm10' field.
   * @return The value of the 's2_pm10' field.
   */
  public airqo.models.s2_pm10 getS2Pm10() {
    return s2_pm10;
  }


  /**
   * Sets the value of the 's2_pm10' field.
   * @param value the value to set.
   */
  public void setS2Pm10(airqo.models.s2_pm10 value) {
    this.s2_pm10 = value;
  }

  /**
   * Gets the value of the 's2_pm2_5' field.
   * @return The value of the 's2_pm2_5' field.
   */
  public airqo.models.s2_pm2_5 getS2Pm25() {
    return s2_pm2_5;
  }


  /**
   * Sets the value of the 's2_pm2_5' field.
   * @param value the value to set.
   */
  public void setS2Pm25(airqo.models.s2_pm2_5 value) {
    this.s2_pm2_5 = value;
  }

  /**
   * Creates a new Measurement RecordBuilder.
   * @return A new Measurement RecordBuilder
   */
  public static airqo.models.Measurement.Builder newBuilder() {
    return new airqo.models.Measurement.Builder();
  }

  /**
   * Creates a new Measurement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Measurement RecordBuilder
   */
  public static airqo.models.Measurement.Builder newBuilder(airqo.models.Measurement.Builder other) {
    if (other == null) {
      return new airqo.models.Measurement.Builder();
    } else {
      return new airqo.models.Measurement.Builder(other);
    }
  }

  /**
   * Creates a new Measurement RecordBuilder by copying an existing Measurement instance.
   * @param other The existing instance to copy.
   * @return A new Measurement RecordBuilder
   */
  public static airqo.models.Measurement.Builder newBuilder(airqo.models.Measurement other) {
    if (other == null) {
      return new airqo.models.Measurement.Builder();
    } else {
      return new airqo.models.Measurement.Builder(other);
    }
  }

  /**
   * RecordBuilder for Measurement instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Measurement>
    implements org.apache.avro.data.RecordBuilder<Measurement> {

    private airqo.models.frequency frequency;
    private java.lang.CharSequence time;
    private java.lang.CharSequence device;
    private java.lang.CharSequence device_id;
    private java.lang.CharSequence site_id;
    private java.lang.Integer device_number;
    private airqo.models.tenant tenant;
    private airqo.models.location location;
    private airqo.models.location.Builder locationBuilder;
    private airqo.models.internalTemperature internalTemperature;
    private airqo.models.internalTemperature.Builder internalTemperatureBuilder;
    private airqo.models.internalHumidity internalHumidity;
    private airqo.models.internalHumidity.Builder internalHumidityBuilder;
    private airqo.models.externalTemperature externalTemperature;
    private airqo.models.externalTemperature.Builder externalTemperatureBuilder;
    private airqo.models.externalHumidity externalHumidity;
    private airqo.models.externalHumidity.Builder externalHumidityBuilder;
    private airqo.models.externalPressure externalPressure;
    private airqo.models.externalPressure.Builder externalPressureBuilder;
    private airqo.models.pm10 pm10;
    private airqo.models.pm10.Builder pm10Builder;
    private airqo.models.pm2_5 pm2_5;
    private airqo.models.pm2_5.Builder pm2_5Builder;
    private airqo.models.no2 no2;
    private airqo.models.no2.Builder no2Builder;
    private airqo.models.pm1 pm1;
    private airqo.models.pm1.Builder pm1Builder;
    private airqo.models.speed speed;
    private airqo.models.speed.Builder speedBuilder;
    private airqo.models.altitude altitude;
    private airqo.models.altitude.Builder altitudeBuilder;
    private airqo.models.battery battery;
    private airqo.models.battery.Builder batteryBuilder;
    private airqo.models.satellites satellites;
    private airqo.models.satellites.Builder satellitesBuilder;
    private airqo.models.hdop hdop;
    private airqo.models.hdop.Builder hdopBuilder;
    private airqo.models.s2_pm10 s2_pm10;
    private airqo.models.s2_pm10.Builder s2_pm10Builder;
    private airqo.models.s2_pm2_5 s2_pm2_5;
    private airqo.models.s2_pm2_5.Builder s2_pm2_5Builder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(airqo.models.Measurement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.frequency)) {
        this.frequency = data().deepCopy(fields()[0].schema(), other.frequency);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.device)) {
        this.device = data().deepCopy(fields()[2].schema(), other.device);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.device_id)) {
        this.device_id = data().deepCopy(fields()[3].schema(), other.device_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.site_id)) {
        this.site_id = data().deepCopy(fields()[4].schema(), other.site_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.device_number)) {
        this.device_number = data().deepCopy(fields()[5].schema(), other.device_number);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.tenant)) {
        this.tenant = data().deepCopy(fields()[6].schema(), other.tenant);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.location)) {
        this.location = data().deepCopy(fields()[7].schema(), other.location);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = airqo.models.location.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[8], other.internalTemperature)) {
        this.internalTemperature = data().deepCopy(fields()[8].schema(), other.internalTemperature);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasInternalTemperatureBuilder()) {
        this.internalTemperatureBuilder = airqo.models.internalTemperature.newBuilder(other.getInternalTemperatureBuilder());
      }
      if (isValidValue(fields()[9], other.internalHumidity)) {
        this.internalHumidity = data().deepCopy(fields()[9].schema(), other.internalHumidity);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasInternalHumidityBuilder()) {
        this.internalHumidityBuilder = airqo.models.internalHumidity.newBuilder(other.getInternalHumidityBuilder());
      }
      if (isValidValue(fields()[10], other.externalTemperature)) {
        this.externalTemperature = data().deepCopy(fields()[10].schema(), other.externalTemperature);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasExternalTemperatureBuilder()) {
        this.externalTemperatureBuilder = airqo.models.externalTemperature.newBuilder(other.getExternalTemperatureBuilder());
      }
      if (isValidValue(fields()[11], other.externalHumidity)) {
        this.externalHumidity = data().deepCopy(fields()[11].schema(), other.externalHumidity);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (other.hasExternalHumidityBuilder()) {
        this.externalHumidityBuilder = airqo.models.externalHumidity.newBuilder(other.getExternalHumidityBuilder());
      }
      if (isValidValue(fields()[12], other.externalPressure)) {
        this.externalPressure = data().deepCopy(fields()[12].schema(), other.externalPressure);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (other.hasExternalPressureBuilder()) {
        this.externalPressureBuilder = airqo.models.externalPressure.newBuilder(other.getExternalPressureBuilder());
      }
      if (isValidValue(fields()[13], other.pm10)) {
        this.pm10 = data().deepCopy(fields()[13].schema(), other.pm10);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (other.hasPm10Builder()) {
        this.pm10Builder = airqo.models.pm10.newBuilder(other.getPm10Builder());
      }
      if (isValidValue(fields()[14], other.pm2_5)) {
        this.pm2_5 = data().deepCopy(fields()[14].schema(), other.pm2_5);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (other.hasPm25Builder()) {
        this.pm2_5Builder = airqo.models.pm2_5.newBuilder(other.getPm25Builder());
      }
      if (isValidValue(fields()[15], other.no2)) {
        this.no2 = data().deepCopy(fields()[15].schema(), other.no2);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (other.hasNo2Builder()) {
        this.no2Builder = airqo.models.no2.newBuilder(other.getNo2Builder());
      }
      if (isValidValue(fields()[16], other.pm1)) {
        this.pm1 = data().deepCopy(fields()[16].schema(), other.pm1);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (other.hasPm1Builder()) {
        this.pm1Builder = airqo.models.pm1.newBuilder(other.getPm1Builder());
      }
      if (isValidValue(fields()[17], other.speed)) {
        this.speed = data().deepCopy(fields()[17].schema(), other.speed);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (other.hasSpeedBuilder()) {
        this.speedBuilder = airqo.models.speed.newBuilder(other.getSpeedBuilder());
      }
      if (isValidValue(fields()[18], other.altitude)) {
        this.altitude = data().deepCopy(fields()[18].schema(), other.altitude);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (other.hasAltitudeBuilder()) {
        this.altitudeBuilder = airqo.models.altitude.newBuilder(other.getAltitudeBuilder());
      }
      if (isValidValue(fields()[19], other.battery)) {
        this.battery = data().deepCopy(fields()[19].schema(), other.battery);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (other.hasBatteryBuilder()) {
        this.batteryBuilder = airqo.models.battery.newBuilder(other.getBatteryBuilder());
      }
      if (isValidValue(fields()[20], other.satellites)) {
        this.satellites = data().deepCopy(fields()[20].schema(), other.satellites);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (other.hasSatellitesBuilder()) {
        this.satellitesBuilder = airqo.models.satellites.newBuilder(other.getSatellitesBuilder());
      }
      if (isValidValue(fields()[21], other.hdop)) {
        this.hdop = data().deepCopy(fields()[21].schema(), other.hdop);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (other.hasHdopBuilder()) {
        this.hdopBuilder = airqo.models.hdop.newBuilder(other.getHdopBuilder());
      }
      if (isValidValue(fields()[22], other.s2_pm10)) {
        this.s2_pm10 = data().deepCopy(fields()[22].schema(), other.s2_pm10);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (other.hasS2Pm10Builder()) {
        this.s2_pm10Builder = airqo.models.s2_pm10.newBuilder(other.getS2Pm10Builder());
      }
      if (isValidValue(fields()[23], other.s2_pm2_5)) {
        this.s2_pm2_5 = data().deepCopy(fields()[23].schema(), other.s2_pm2_5);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (other.hasS2Pm25Builder()) {
        this.s2_pm2_5Builder = airqo.models.s2_pm2_5.newBuilder(other.getS2Pm25Builder());
      }
    }

    /**
     * Creates a Builder by copying an existing Measurement instance
     * @param other The existing instance to copy.
     */
    private Builder(airqo.models.Measurement other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.frequency)) {
        this.frequency = data().deepCopy(fields()[0].schema(), other.frequency);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.device)) {
        this.device = data().deepCopy(fields()[2].schema(), other.device);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.device_id)) {
        this.device_id = data().deepCopy(fields()[3].schema(), other.device_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.site_id)) {
        this.site_id = data().deepCopy(fields()[4].schema(), other.site_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.device_number)) {
        this.device_number = data().deepCopy(fields()[5].schema(), other.device_number);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tenant)) {
        this.tenant = data().deepCopy(fields()[6].schema(), other.tenant);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.location)) {
        this.location = data().deepCopy(fields()[7].schema(), other.location);
        fieldSetFlags()[7] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[8], other.internalTemperature)) {
        this.internalTemperature = data().deepCopy(fields()[8].schema(), other.internalTemperature);
        fieldSetFlags()[8] = true;
      }
      this.internalTemperatureBuilder = null;
      if (isValidValue(fields()[9], other.internalHumidity)) {
        this.internalHumidity = data().deepCopy(fields()[9].schema(), other.internalHumidity);
        fieldSetFlags()[9] = true;
      }
      this.internalHumidityBuilder = null;
      if (isValidValue(fields()[10], other.externalTemperature)) {
        this.externalTemperature = data().deepCopy(fields()[10].schema(), other.externalTemperature);
        fieldSetFlags()[10] = true;
      }
      this.externalTemperatureBuilder = null;
      if (isValidValue(fields()[11], other.externalHumidity)) {
        this.externalHumidity = data().deepCopy(fields()[11].schema(), other.externalHumidity);
        fieldSetFlags()[11] = true;
      }
      this.externalHumidityBuilder = null;
      if (isValidValue(fields()[12], other.externalPressure)) {
        this.externalPressure = data().deepCopy(fields()[12].schema(), other.externalPressure);
        fieldSetFlags()[12] = true;
      }
      this.externalPressureBuilder = null;
      if (isValidValue(fields()[13], other.pm10)) {
        this.pm10 = data().deepCopy(fields()[13].schema(), other.pm10);
        fieldSetFlags()[13] = true;
      }
      this.pm10Builder = null;
      if (isValidValue(fields()[14], other.pm2_5)) {
        this.pm2_5 = data().deepCopy(fields()[14].schema(), other.pm2_5);
        fieldSetFlags()[14] = true;
      }
      this.pm2_5Builder = null;
      if (isValidValue(fields()[15], other.no2)) {
        this.no2 = data().deepCopy(fields()[15].schema(), other.no2);
        fieldSetFlags()[15] = true;
      }
      this.no2Builder = null;
      if (isValidValue(fields()[16], other.pm1)) {
        this.pm1 = data().deepCopy(fields()[16].schema(), other.pm1);
        fieldSetFlags()[16] = true;
      }
      this.pm1Builder = null;
      if (isValidValue(fields()[17], other.speed)) {
        this.speed = data().deepCopy(fields()[17].schema(), other.speed);
        fieldSetFlags()[17] = true;
      }
      this.speedBuilder = null;
      if (isValidValue(fields()[18], other.altitude)) {
        this.altitude = data().deepCopy(fields()[18].schema(), other.altitude);
        fieldSetFlags()[18] = true;
      }
      this.altitudeBuilder = null;
      if (isValidValue(fields()[19], other.battery)) {
        this.battery = data().deepCopy(fields()[19].schema(), other.battery);
        fieldSetFlags()[19] = true;
      }
      this.batteryBuilder = null;
      if (isValidValue(fields()[20], other.satellites)) {
        this.satellites = data().deepCopy(fields()[20].schema(), other.satellites);
        fieldSetFlags()[20] = true;
      }
      this.satellitesBuilder = null;
      if (isValidValue(fields()[21], other.hdop)) {
        this.hdop = data().deepCopy(fields()[21].schema(), other.hdop);
        fieldSetFlags()[21] = true;
      }
      this.hdopBuilder = null;
      if (isValidValue(fields()[22], other.s2_pm10)) {
        this.s2_pm10 = data().deepCopy(fields()[22].schema(), other.s2_pm10);
        fieldSetFlags()[22] = true;
      }
      this.s2_pm10Builder = null;
      if (isValidValue(fields()[23], other.s2_pm2_5)) {
        this.s2_pm2_5 = data().deepCopy(fields()[23].schema(), other.s2_pm2_5);
        fieldSetFlags()[23] = true;
      }
      this.s2_pm2_5Builder = null;
    }

    /**
      * Gets the value of the 'frequency' field.
      * @return The value.
      */
    public airqo.models.frequency getFrequency() {
      return frequency;
    }


    /**
      * Sets the value of the 'frequency' field.
      * @param value The value of 'frequency'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setFrequency(airqo.models.frequency value) {
      validate(fields()[0], value);
      this.frequency = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'frequency' field has been set.
      * @return True if the 'frequency' field has been set, false otherwise.
      */
    public boolean hasFrequency() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'frequency' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearFrequency() {
      frequency = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.CharSequence getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'device' field.
      * @return The value.
      */
    public java.lang.CharSequence getDevice() {
      return device;
    }


    /**
      * Sets the value of the 'device' field.
      * @param value The value of 'device'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setDevice(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.device = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'device' field has been set.
      * @return True if the 'device' field has been set, false otherwise.
      */
    public boolean hasDevice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'device' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearDevice() {
      device = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'device_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return device_id;
    }


    /**
      * Sets the value of the 'device_id' field.
      * @param value The value of 'device_id'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.device_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'device_id' field has been set.
      * @return True if the 'device_id' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'device_id' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearDeviceId() {
      device_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'site_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getSiteId() {
      return site_id;
    }


    /**
      * Sets the value of the 'site_id' field.
      * @param value The value of 'site_id'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setSiteId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.site_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'site_id' field has been set.
      * @return True if the 'site_id' field has been set, false otherwise.
      */
    public boolean hasSiteId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'site_id' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearSiteId() {
      site_id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'device_number' field.
      * @return The value.
      */
    public java.lang.Integer getDeviceNumber() {
      return device_number;
    }


    /**
      * Sets the value of the 'device_number' field.
      * @param value The value of 'device_number'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setDeviceNumber(java.lang.Integer value) {
      validate(fields()[5], value);
      this.device_number = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'device_number' field has been set.
      * @return True if the 'device_number' field has been set, false otherwise.
      */
    public boolean hasDeviceNumber() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'device_number' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearDeviceNumber() {
      device_number = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenant' field.
      * @return The value.
      */
    public airqo.models.tenant getTenant() {
      return tenant;
    }


    /**
      * Sets the value of the 'tenant' field.
      * @param value The value of 'tenant'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setTenant(airqo.models.tenant value) {
      validate(fields()[6], value);
      this.tenant = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tenant' field has been set.
      * @return True if the 'tenant' field has been set, false otherwise.
      */
    public boolean hasTenant() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tenant' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearTenant() {
      tenant = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public airqo.models.location getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setLocation(airqo.models.location value) {
      validate(fields()[7], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(airqo.models.location.newBuilder(location));
        } else {
          setLocationBuilder(airqo.models.location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setLocationBuilder(airqo.models.location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'internalTemperature' field.
      * @return The value.
      */
    public airqo.models.internalTemperature getInternalTemperature() {
      return internalTemperature;
    }


    /**
      * Sets the value of the 'internalTemperature' field.
      * @param value The value of 'internalTemperature'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setInternalTemperature(airqo.models.internalTemperature value) {
      validate(fields()[8], value);
      this.internalTemperatureBuilder = null;
      this.internalTemperature = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'internalTemperature' field has been set.
      * @return True if the 'internalTemperature' field has been set, false otherwise.
      */
    public boolean hasInternalTemperature() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'internalTemperature' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.internalTemperature.Builder getInternalTemperatureBuilder() {
      if (internalTemperatureBuilder == null) {
        if (hasInternalTemperature()) {
          setInternalTemperatureBuilder(airqo.models.internalTemperature.newBuilder(internalTemperature));
        } else {
          setInternalTemperatureBuilder(airqo.models.internalTemperature.newBuilder());
        }
      }
      return internalTemperatureBuilder;
    }

    /**
     * Sets the Builder instance for the 'internalTemperature' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setInternalTemperatureBuilder(airqo.models.internalTemperature.Builder value) {
      clearInternalTemperature();
      internalTemperatureBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'internalTemperature' field has an active Builder instance
     * @return True if the 'internalTemperature' field has an active Builder instance
     */
    public boolean hasInternalTemperatureBuilder() {
      return internalTemperatureBuilder != null;
    }

    /**
      * Clears the value of the 'internalTemperature' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearInternalTemperature() {
      internalTemperature = null;
      internalTemperatureBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'internalHumidity' field.
      * @return The value.
      */
    public airqo.models.internalHumidity getInternalHumidity() {
      return internalHumidity;
    }


    /**
      * Sets the value of the 'internalHumidity' field.
      * @param value The value of 'internalHumidity'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setInternalHumidity(airqo.models.internalHumidity value) {
      validate(fields()[9], value);
      this.internalHumidityBuilder = null;
      this.internalHumidity = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'internalHumidity' field has been set.
      * @return True if the 'internalHumidity' field has been set, false otherwise.
      */
    public boolean hasInternalHumidity() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'internalHumidity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.internalHumidity.Builder getInternalHumidityBuilder() {
      if (internalHumidityBuilder == null) {
        if (hasInternalHumidity()) {
          setInternalHumidityBuilder(airqo.models.internalHumidity.newBuilder(internalHumidity));
        } else {
          setInternalHumidityBuilder(airqo.models.internalHumidity.newBuilder());
        }
      }
      return internalHumidityBuilder;
    }

    /**
     * Sets the Builder instance for the 'internalHumidity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setInternalHumidityBuilder(airqo.models.internalHumidity.Builder value) {
      clearInternalHumidity();
      internalHumidityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'internalHumidity' field has an active Builder instance
     * @return True if the 'internalHumidity' field has an active Builder instance
     */
    public boolean hasInternalHumidityBuilder() {
      return internalHumidityBuilder != null;
    }

    /**
      * Clears the value of the 'internalHumidity' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearInternalHumidity() {
      internalHumidity = null;
      internalHumidityBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalTemperature' field.
      * @return The value.
      */
    public airqo.models.externalTemperature getExternalTemperature() {
      return externalTemperature;
    }


    /**
      * Sets the value of the 'externalTemperature' field.
      * @param value The value of 'externalTemperature'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setExternalTemperature(airqo.models.externalTemperature value) {
      validate(fields()[10], value);
      this.externalTemperatureBuilder = null;
      this.externalTemperature = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'externalTemperature' field has been set.
      * @return True if the 'externalTemperature' field has been set, false otherwise.
      */
    public boolean hasExternalTemperature() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'externalTemperature' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.externalTemperature.Builder getExternalTemperatureBuilder() {
      if (externalTemperatureBuilder == null) {
        if (hasExternalTemperature()) {
          setExternalTemperatureBuilder(airqo.models.externalTemperature.newBuilder(externalTemperature));
        } else {
          setExternalTemperatureBuilder(airqo.models.externalTemperature.newBuilder());
        }
      }
      return externalTemperatureBuilder;
    }

    /**
     * Sets the Builder instance for the 'externalTemperature' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setExternalTemperatureBuilder(airqo.models.externalTemperature.Builder value) {
      clearExternalTemperature();
      externalTemperatureBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'externalTemperature' field has an active Builder instance
     * @return True if the 'externalTemperature' field has an active Builder instance
     */
    public boolean hasExternalTemperatureBuilder() {
      return externalTemperatureBuilder != null;
    }

    /**
      * Clears the value of the 'externalTemperature' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearExternalTemperature() {
      externalTemperature = null;
      externalTemperatureBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalHumidity' field.
      * @return The value.
      */
    public airqo.models.externalHumidity getExternalHumidity() {
      return externalHumidity;
    }


    /**
      * Sets the value of the 'externalHumidity' field.
      * @param value The value of 'externalHumidity'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setExternalHumidity(airqo.models.externalHumidity value) {
      validate(fields()[11], value);
      this.externalHumidityBuilder = null;
      this.externalHumidity = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'externalHumidity' field has been set.
      * @return True if the 'externalHumidity' field has been set, false otherwise.
      */
    public boolean hasExternalHumidity() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'externalHumidity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.externalHumidity.Builder getExternalHumidityBuilder() {
      if (externalHumidityBuilder == null) {
        if (hasExternalHumidity()) {
          setExternalHumidityBuilder(airqo.models.externalHumidity.newBuilder(externalHumidity));
        } else {
          setExternalHumidityBuilder(airqo.models.externalHumidity.newBuilder());
        }
      }
      return externalHumidityBuilder;
    }

    /**
     * Sets the Builder instance for the 'externalHumidity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setExternalHumidityBuilder(airqo.models.externalHumidity.Builder value) {
      clearExternalHumidity();
      externalHumidityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'externalHumidity' field has an active Builder instance
     * @return True if the 'externalHumidity' field has an active Builder instance
     */
    public boolean hasExternalHumidityBuilder() {
      return externalHumidityBuilder != null;
    }

    /**
      * Clears the value of the 'externalHumidity' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearExternalHumidity() {
      externalHumidity = null;
      externalHumidityBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalPressure' field.
      * @return The value.
      */
    public airqo.models.externalPressure getExternalPressure() {
      return externalPressure;
    }


    /**
      * Sets the value of the 'externalPressure' field.
      * @param value The value of 'externalPressure'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setExternalPressure(airqo.models.externalPressure value) {
      validate(fields()[12], value);
      this.externalPressureBuilder = null;
      this.externalPressure = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'externalPressure' field has been set.
      * @return True if the 'externalPressure' field has been set, false otherwise.
      */
    public boolean hasExternalPressure() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'externalPressure' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.externalPressure.Builder getExternalPressureBuilder() {
      if (externalPressureBuilder == null) {
        if (hasExternalPressure()) {
          setExternalPressureBuilder(airqo.models.externalPressure.newBuilder(externalPressure));
        } else {
          setExternalPressureBuilder(airqo.models.externalPressure.newBuilder());
        }
      }
      return externalPressureBuilder;
    }

    /**
     * Sets the Builder instance for the 'externalPressure' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setExternalPressureBuilder(airqo.models.externalPressure.Builder value) {
      clearExternalPressure();
      externalPressureBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'externalPressure' field has an active Builder instance
     * @return True if the 'externalPressure' field has an active Builder instance
     */
    public boolean hasExternalPressureBuilder() {
      return externalPressureBuilder != null;
    }

    /**
      * Clears the value of the 'externalPressure' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearExternalPressure() {
      externalPressure = null;
      externalPressureBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm10' field.
      * @return The value.
      */
    public airqo.models.pm10 getPm10() {
      return pm10;
    }


    /**
      * Sets the value of the 'pm10' field.
      * @param value The value of 'pm10'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setPm10(airqo.models.pm10 value) {
      validate(fields()[13], value);
      this.pm10Builder = null;
      this.pm10 = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'pm10' field has been set.
      * @return True if the 'pm10' field has been set, false otherwise.
      */
    public boolean hasPm10() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'pm10' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.pm10.Builder getPm10Builder() {
      if (pm10Builder == null) {
        if (hasPm10()) {
          setPm10Builder(airqo.models.pm10.newBuilder(pm10));
        } else {
          setPm10Builder(airqo.models.pm10.newBuilder());
        }
      }
      return pm10Builder;
    }

    /**
     * Sets the Builder instance for the 'pm10' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setPm10Builder(airqo.models.pm10.Builder value) {
      clearPm10();
      pm10Builder = value;
      return this;
    }

    /**
     * Checks whether the 'pm10' field has an active Builder instance
     * @return True if the 'pm10' field has an active Builder instance
     */
    public boolean hasPm10Builder() {
      return pm10Builder != null;
    }

    /**
      * Clears the value of the 'pm10' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearPm10() {
      pm10 = null;
      pm10Builder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm2_5' field.
      * @return The value.
      */
    public airqo.models.pm2_5 getPm25() {
      return pm2_5;
    }


    /**
      * Sets the value of the 'pm2_5' field.
      * @param value The value of 'pm2_5'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setPm25(airqo.models.pm2_5 value) {
      validate(fields()[14], value);
      this.pm2_5Builder = null;
      this.pm2_5 = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'pm2_5' field has been set.
      * @return True if the 'pm2_5' field has been set, false otherwise.
      */
    public boolean hasPm25() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'pm2_5' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.pm2_5.Builder getPm25Builder() {
      if (pm2_5Builder == null) {
        if (hasPm25()) {
          setPm25Builder(airqo.models.pm2_5.newBuilder(pm2_5));
        } else {
          setPm25Builder(airqo.models.pm2_5.newBuilder());
        }
      }
      return pm2_5Builder;
    }

    /**
     * Sets the Builder instance for the 'pm2_5' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setPm25Builder(airqo.models.pm2_5.Builder value) {
      clearPm25();
      pm2_5Builder = value;
      return this;
    }

    /**
     * Checks whether the 'pm2_5' field has an active Builder instance
     * @return True if the 'pm2_5' field has an active Builder instance
     */
    public boolean hasPm25Builder() {
      return pm2_5Builder != null;
    }

    /**
      * Clears the value of the 'pm2_5' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearPm25() {
      pm2_5 = null;
      pm2_5Builder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'no2' field.
      * @return The value.
      */
    public airqo.models.no2 getNo2() {
      return no2;
    }


    /**
      * Sets the value of the 'no2' field.
      * @param value The value of 'no2'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setNo2(airqo.models.no2 value) {
      validate(fields()[15], value);
      this.no2Builder = null;
      this.no2 = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'no2' field has been set.
      * @return True if the 'no2' field has been set, false otherwise.
      */
    public boolean hasNo2() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'no2' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.no2.Builder getNo2Builder() {
      if (no2Builder == null) {
        if (hasNo2()) {
          setNo2Builder(airqo.models.no2.newBuilder(no2));
        } else {
          setNo2Builder(airqo.models.no2.newBuilder());
        }
      }
      return no2Builder;
    }

    /**
     * Sets the Builder instance for the 'no2' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setNo2Builder(airqo.models.no2.Builder value) {
      clearNo2();
      no2Builder = value;
      return this;
    }

    /**
     * Checks whether the 'no2' field has an active Builder instance
     * @return True if the 'no2' field has an active Builder instance
     */
    public boolean hasNo2Builder() {
      return no2Builder != null;
    }

    /**
      * Clears the value of the 'no2' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearNo2() {
      no2 = null;
      no2Builder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm1' field.
      * @return The value.
      */
    public airqo.models.pm1 getPm1() {
      return pm1;
    }


    /**
      * Sets the value of the 'pm1' field.
      * @param value The value of 'pm1'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setPm1(airqo.models.pm1 value) {
      validate(fields()[16], value);
      this.pm1Builder = null;
      this.pm1 = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'pm1' field has been set.
      * @return True if the 'pm1' field has been set, false otherwise.
      */
    public boolean hasPm1() {
      return fieldSetFlags()[16];
    }

    /**
     * Gets the Builder instance for the 'pm1' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.pm1.Builder getPm1Builder() {
      if (pm1Builder == null) {
        if (hasPm1()) {
          setPm1Builder(airqo.models.pm1.newBuilder(pm1));
        } else {
          setPm1Builder(airqo.models.pm1.newBuilder());
        }
      }
      return pm1Builder;
    }

    /**
     * Sets the Builder instance for the 'pm1' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setPm1Builder(airqo.models.pm1.Builder value) {
      clearPm1();
      pm1Builder = value;
      return this;
    }

    /**
     * Checks whether the 'pm1' field has an active Builder instance
     * @return True if the 'pm1' field has an active Builder instance
     */
    public boolean hasPm1Builder() {
      return pm1Builder != null;
    }

    /**
      * Clears the value of the 'pm1' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearPm1() {
      pm1 = null;
      pm1Builder = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public airqo.models.speed getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setSpeed(airqo.models.speed value) {
      validate(fields()[17], value);
      this.speedBuilder = null;
      this.speed = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[17];
    }

    /**
     * Gets the Builder instance for the 'speed' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.speed.Builder getSpeedBuilder() {
      if (speedBuilder == null) {
        if (hasSpeed()) {
          setSpeedBuilder(airqo.models.speed.newBuilder(speed));
        } else {
          setSpeedBuilder(airqo.models.speed.newBuilder());
        }
      }
      return speedBuilder;
    }

    /**
     * Sets the Builder instance for the 'speed' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setSpeedBuilder(airqo.models.speed.Builder value) {
      clearSpeed();
      speedBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'speed' field has an active Builder instance
     * @return True if the 'speed' field has an active Builder instance
     */
    public boolean hasSpeedBuilder() {
      return speedBuilder != null;
    }

    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearSpeed() {
      speed = null;
      speedBuilder = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'altitude' field.
      * @return The value.
      */
    public airqo.models.altitude getAltitude() {
      return altitude;
    }


    /**
      * Sets the value of the 'altitude' field.
      * @param value The value of 'altitude'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setAltitude(airqo.models.altitude value) {
      validate(fields()[18], value);
      this.altitudeBuilder = null;
      this.altitude = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'altitude' field has been set.
      * @return True if the 'altitude' field has been set, false otherwise.
      */
    public boolean hasAltitude() {
      return fieldSetFlags()[18];
    }

    /**
     * Gets the Builder instance for the 'altitude' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.altitude.Builder getAltitudeBuilder() {
      if (altitudeBuilder == null) {
        if (hasAltitude()) {
          setAltitudeBuilder(airqo.models.altitude.newBuilder(altitude));
        } else {
          setAltitudeBuilder(airqo.models.altitude.newBuilder());
        }
      }
      return altitudeBuilder;
    }

    /**
     * Sets the Builder instance for the 'altitude' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setAltitudeBuilder(airqo.models.altitude.Builder value) {
      clearAltitude();
      altitudeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'altitude' field has an active Builder instance
     * @return True if the 'altitude' field has an active Builder instance
     */
    public boolean hasAltitudeBuilder() {
      return altitudeBuilder != null;
    }

    /**
      * Clears the value of the 'altitude' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearAltitude() {
      altitude = null;
      altitudeBuilder = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'battery' field.
      * @return The value.
      */
    public airqo.models.battery getBattery() {
      return battery;
    }


    /**
      * Sets the value of the 'battery' field.
      * @param value The value of 'battery'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setBattery(airqo.models.battery value) {
      validate(fields()[19], value);
      this.batteryBuilder = null;
      this.battery = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'battery' field has been set.
      * @return True if the 'battery' field has been set, false otherwise.
      */
    public boolean hasBattery() {
      return fieldSetFlags()[19];
    }

    /**
     * Gets the Builder instance for the 'battery' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.battery.Builder getBatteryBuilder() {
      if (batteryBuilder == null) {
        if (hasBattery()) {
          setBatteryBuilder(airqo.models.battery.newBuilder(battery));
        } else {
          setBatteryBuilder(airqo.models.battery.newBuilder());
        }
      }
      return batteryBuilder;
    }

    /**
     * Sets the Builder instance for the 'battery' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setBatteryBuilder(airqo.models.battery.Builder value) {
      clearBattery();
      batteryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'battery' field has an active Builder instance
     * @return True if the 'battery' field has an active Builder instance
     */
    public boolean hasBatteryBuilder() {
      return batteryBuilder != null;
    }

    /**
      * Clears the value of the 'battery' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearBattery() {
      battery = null;
      batteryBuilder = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'satellites' field.
      * @return The value.
      */
    public airqo.models.satellites getSatellites() {
      return satellites;
    }


    /**
      * Sets the value of the 'satellites' field.
      * @param value The value of 'satellites'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setSatellites(airqo.models.satellites value) {
      validate(fields()[20], value);
      this.satellitesBuilder = null;
      this.satellites = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'satellites' field has been set.
      * @return True if the 'satellites' field has been set, false otherwise.
      */
    public boolean hasSatellites() {
      return fieldSetFlags()[20];
    }

    /**
     * Gets the Builder instance for the 'satellites' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.satellites.Builder getSatellitesBuilder() {
      if (satellitesBuilder == null) {
        if (hasSatellites()) {
          setSatellitesBuilder(airqo.models.satellites.newBuilder(satellites));
        } else {
          setSatellitesBuilder(airqo.models.satellites.newBuilder());
        }
      }
      return satellitesBuilder;
    }

    /**
     * Sets the Builder instance for the 'satellites' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setSatellitesBuilder(airqo.models.satellites.Builder value) {
      clearSatellites();
      satellitesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'satellites' field has an active Builder instance
     * @return True if the 'satellites' field has an active Builder instance
     */
    public boolean hasSatellitesBuilder() {
      return satellitesBuilder != null;
    }

    /**
      * Clears the value of the 'satellites' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearSatellites() {
      satellites = null;
      satellitesBuilder = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'hdop' field.
      * @return The value.
      */
    public airqo.models.hdop getHdop() {
      return hdop;
    }


    /**
      * Sets the value of the 'hdop' field.
      * @param value The value of 'hdop'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setHdop(airqo.models.hdop value) {
      validate(fields()[21], value);
      this.hdopBuilder = null;
      this.hdop = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'hdop' field has been set.
      * @return True if the 'hdop' field has been set, false otherwise.
      */
    public boolean hasHdop() {
      return fieldSetFlags()[21];
    }

    /**
     * Gets the Builder instance for the 'hdop' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.hdop.Builder getHdopBuilder() {
      if (hdopBuilder == null) {
        if (hasHdop()) {
          setHdopBuilder(airqo.models.hdop.newBuilder(hdop));
        } else {
          setHdopBuilder(airqo.models.hdop.newBuilder());
        }
      }
      return hdopBuilder;
    }

    /**
     * Sets the Builder instance for the 'hdop' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setHdopBuilder(airqo.models.hdop.Builder value) {
      clearHdop();
      hdopBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'hdop' field has an active Builder instance
     * @return True if the 'hdop' field has an active Builder instance
     */
    public boolean hasHdopBuilder() {
      return hdopBuilder != null;
    }

    /**
      * Clears the value of the 'hdop' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearHdop() {
      hdop = null;
      hdopBuilder = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 's2_pm10' field.
      * @return The value.
      */
    public airqo.models.s2_pm10 getS2Pm10() {
      return s2_pm10;
    }


    /**
      * Sets the value of the 's2_pm10' field.
      * @param value The value of 's2_pm10'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setS2Pm10(airqo.models.s2_pm10 value) {
      validate(fields()[22], value);
      this.s2_pm10Builder = null;
      this.s2_pm10 = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 's2_pm10' field has been set.
      * @return True if the 's2_pm10' field has been set, false otherwise.
      */
    public boolean hasS2Pm10() {
      return fieldSetFlags()[22];
    }

    /**
     * Gets the Builder instance for the 's2_pm10' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.s2_pm10.Builder getS2Pm10Builder() {
      if (s2_pm10Builder == null) {
        if (hasS2Pm10()) {
          setS2Pm10Builder(airqo.models.s2_pm10.newBuilder(s2_pm10));
        } else {
          setS2Pm10Builder(airqo.models.s2_pm10.newBuilder());
        }
      }
      return s2_pm10Builder;
    }

    /**
     * Sets the Builder instance for the 's2_pm10' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setS2Pm10Builder(airqo.models.s2_pm10.Builder value) {
      clearS2Pm10();
      s2_pm10Builder = value;
      return this;
    }

    /**
     * Checks whether the 's2_pm10' field has an active Builder instance
     * @return True if the 's2_pm10' field has an active Builder instance
     */
    public boolean hasS2Pm10Builder() {
      return s2_pm10Builder != null;
    }

    /**
      * Clears the value of the 's2_pm10' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearS2Pm10() {
      s2_pm10 = null;
      s2_pm10Builder = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 's2_pm2_5' field.
      * @return The value.
      */
    public airqo.models.s2_pm2_5 getS2Pm25() {
      return s2_pm2_5;
    }


    /**
      * Sets the value of the 's2_pm2_5' field.
      * @param value The value of 's2_pm2_5'.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder setS2Pm25(airqo.models.s2_pm2_5 value) {
      validate(fields()[23], value);
      this.s2_pm2_5Builder = null;
      this.s2_pm2_5 = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 's2_pm2_5' field has been set.
      * @return True if the 's2_pm2_5' field has been set, false otherwise.
      */
    public boolean hasS2Pm25() {
      return fieldSetFlags()[23];
    }

    /**
     * Gets the Builder instance for the 's2_pm2_5' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public airqo.models.s2_pm2_5.Builder getS2Pm25Builder() {
      if (s2_pm2_5Builder == null) {
        if (hasS2Pm25()) {
          setS2Pm25Builder(airqo.models.s2_pm2_5.newBuilder(s2_pm2_5));
        } else {
          setS2Pm25Builder(airqo.models.s2_pm2_5.newBuilder());
        }
      }
      return s2_pm2_5Builder;
    }

    /**
     * Sets the Builder instance for the 's2_pm2_5' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public airqo.models.Measurement.Builder setS2Pm25Builder(airqo.models.s2_pm2_5.Builder value) {
      clearS2Pm25();
      s2_pm2_5Builder = value;
      return this;
    }

    /**
     * Checks whether the 's2_pm2_5' field has an active Builder instance
     * @return True if the 's2_pm2_5' field has an active Builder instance
     */
    public boolean hasS2Pm25Builder() {
      return s2_pm2_5Builder != null;
    }

    /**
      * Clears the value of the 's2_pm2_5' field.
      * @return This builder.
      */
    public airqo.models.Measurement.Builder clearS2Pm25() {
      s2_pm2_5 = null;
      s2_pm2_5Builder = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Measurement build() {
      try {
        Measurement record = new Measurement();
        record.frequency = fieldSetFlags()[0] ? this.frequency : (airqo.models.frequency) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.device = fieldSetFlags()[2] ? this.device : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.device_id = fieldSetFlags()[3] ? this.device_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.site_id = fieldSetFlags()[4] ? this.site_id : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.device_number = fieldSetFlags()[5] ? this.device_number : (java.lang.Integer) defaultValue(fields()[5]);
        record.tenant = fieldSetFlags()[6] ? this.tenant : (airqo.models.tenant) defaultValue(fields()[6]);
        if (locationBuilder != null) {
          try {
            record.location = this.locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("location"));
            throw e;
          }
        } else {
          record.location = fieldSetFlags()[7] ? this.location : (airqo.models.location) defaultValue(fields()[7]);
        }
        if (internalTemperatureBuilder != null) {
          try {
            record.internalTemperature = this.internalTemperatureBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("internalTemperature"));
            throw e;
          }
        } else {
          record.internalTemperature = fieldSetFlags()[8] ? this.internalTemperature : (airqo.models.internalTemperature) defaultValue(fields()[8]);
        }
        if (internalHumidityBuilder != null) {
          try {
            record.internalHumidity = this.internalHumidityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("internalHumidity"));
            throw e;
          }
        } else {
          record.internalHumidity = fieldSetFlags()[9] ? this.internalHumidity : (airqo.models.internalHumidity) defaultValue(fields()[9]);
        }
        if (externalTemperatureBuilder != null) {
          try {
            record.externalTemperature = this.externalTemperatureBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("externalTemperature"));
            throw e;
          }
        } else {
          record.externalTemperature = fieldSetFlags()[10] ? this.externalTemperature : (airqo.models.externalTemperature) defaultValue(fields()[10]);
        }
        if (externalHumidityBuilder != null) {
          try {
            record.externalHumidity = this.externalHumidityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("externalHumidity"));
            throw e;
          }
        } else {
          record.externalHumidity = fieldSetFlags()[11] ? this.externalHumidity : (airqo.models.externalHumidity) defaultValue(fields()[11]);
        }
        if (externalPressureBuilder != null) {
          try {
            record.externalPressure = this.externalPressureBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("externalPressure"));
            throw e;
          }
        } else {
          record.externalPressure = fieldSetFlags()[12] ? this.externalPressure : (airqo.models.externalPressure) defaultValue(fields()[12]);
        }
        if (pm10Builder != null) {
          try {
            record.pm10 = this.pm10Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("pm10"));
            throw e;
          }
        } else {
          record.pm10 = fieldSetFlags()[13] ? this.pm10 : (airqo.models.pm10) defaultValue(fields()[13]);
        }
        if (pm2_5Builder != null) {
          try {
            record.pm2_5 = this.pm2_5Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("pm2_5"));
            throw e;
          }
        } else {
          record.pm2_5 = fieldSetFlags()[14] ? this.pm2_5 : (airqo.models.pm2_5) defaultValue(fields()[14]);
        }
        if (no2Builder != null) {
          try {
            record.no2 = this.no2Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("no2"));
            throw e;
          }
        } else {
          record.no2 = fieldSetFlags()[15] ? this.no2 : (airqo.models.no2) defaultValue(fields()[15]);
        }
        if (pm1Builder != null) {
          try {
            record.pm1 = this.pm1Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("pm1"));
            throw e;
          }
        } else {
          record.pm1 = fieldSetFlags()[16] ? this.pm1 : (airqo.models.pm1) defaultValue(fields()[16]);
        }
        if (speedBuilder != null) {
          try {
            record.speed = this.speedBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("speed"));
            throw e;
          }
        } else {
          record.speed = fieldSetFlags()[17] ? this.speed : (airqo.models.speed) defaultValue(fields()[17]);
        }
        if (altitudeBuilder != null) {
          try {
            record.altitude = this.altitudeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("altitude"));
            throw e;
          }
        } else {
          record.altitude = fieldSetFlags()[18] ? this.altitude : (airqo.models.altitude) defaultValue(fields()[18]);
        }
        if (batteryBuilder != null) {
          try {
            record.battery = this.batteryBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("battery"));
            throw e;
          }
        } else {
          record.battery = fieldSetFlags()[19] ? this.battery : (airqo.models.battery) defaultValue(fields()[19]);
        }
        if (satellitesBuilder != null) {
          try {
            record.satellites = this.satellitesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("satellites"));
            throw e;
          }
        } else {
          record.satellites = fieldSetFlags()[20] ? this.satellites : (airqo.models.satellites) defaultValue(fields()[20]);
        }
        if (hdopBuilder != null) {
          try {
            record.hdop = this.hdopBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("hdop"));
            throw e;
          }
        } else {
          record.hdop = fieldSetFlags()[21] ? this.hdop : (airqo.models.hdop) defaultValue(fields()[21]);
        }
        if (s2_pm10Builder != null) {
          try {
            record.s2_pm10 = this.s2_pm10Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("s2_pm10"));
            throw e;
          }
        } else {
          record.s2_pm10 = fieldSetFlags()[22] ? this.s2_pm10 : (airqo.models.s2_pm10) defaultValue(fields()[22]);
        }
        if (s2_pm2_5Builder != null) {
          try {
            record.s2_pm2_5 = this.s2_pm2_5Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("s2_pm2_5"));
            throw e;
          }
        } else {
          record.s2_pm2_5 = fieldSetFlags()[23] ? this.s2_pm2_5 : (airqo.models.s2_pm2_5) defaultValue(fields()[23]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Measurement>
    WRITER$ = (org.apache.avro.io.DatumWriter<Measurement>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Measurement>
    READER$ = (org.apache.avro.io.DatumReader<Measurement>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.frequency.ordinal());

    out.writeString(this.time);

    out.writeString(this.device);

    out.writeString(this.device_id);

    if (this.site_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.site_id);
    }

    if (this.device_number == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.device_number);
    }

    out.writeEnum(this.tenant.ordinal());

    this.location.customEncode(out);

    this.internalTemperature.customEncode(out);

    this.internalHumidity.customEncode(out);

    this.externalTemperature.customEncode(out);

    this.externalHumidity.customEncode(out);

    this.externalPressure.customEncode(out);

    this.pm10.customEncode(out);

    this.pm2_5.customEncode(out);

    this.no2.customEncode(out);

    this.pm1.customEncode(out);

    this.speed.customEncode(out);

    this.altitude.customEncode(out);

    this.battery.customEncode(out);

    this.satellites.customEncode(out);

    this.hdop.customEncode(out);

    this.s2_pm10.customEncode(out);

    this.s2_pm2_5.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.frequency = airqo.models.frequency.values()[in.readEnum()];

      this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);

      this.device = in.readString(this.device instanceof Utf8 ? (Utf8)this.device : null);

      this.device_id = in.readString(this.device_id instanceof Utf8 ? (Utf8)this.device_id : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.site_id = null;
      } else {
        this.site_id = in.readString(this.site_id instanceof Utf8 ? (Utf8)this.site_id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.device_number = null;
      } else {
        this.device_number = in.readInt();
      }

      this.tenant = airqo.models.tenant.values()[in.readEnum()];

      if (this.location == null) {
        this.location = new airqo.models.location();
      }
      this.location.customDecode(in);

      if (this.internalTemperature == null) {
        this.internalTemperature = new airqo.models.internalTemperature();
      }
      this.internalTemperature.customDecode(in);

      if (this.internalHumidity == null) {
        this.internalHumidity = new airqo.models.internalHumidity();
      }
      this.internalHumidity.customDecode(in);

      if (this.externalTemperature == null) {
        this.externalTemperature = new airqo.models.externalTemperature();
      }
      this.externalTemperature.customDecode(in);

      if (this.externalHumidity == null) {
        this.externalHumidity = new airqo.models.externalHumidity();
      }
      this.externalHumidity.customDecode(in);

      if (this.externalPressure == null) {
        this.externalPressure = new airqo.models.externalPressure();
      }
      this.externalPressure.customDecode(in);

      if (this.pm10 == null) {
        this.pm10 = new airqo.models.pm10();
      }
      this.pm10.customDecode(in);

      if (this.pm2_5 == null) {
        this.pm2_5 = new airqo.models.pm2_5();
      }
      this.pm2_5.customDecode(in);

      if (this.no2 == null) {
        this.no2 = new airqo.models.no2();
      }
      this.no2.customDecode(in);

      if (this.pm1 == null) {
        this.pm1 = new airqo.models.pm1();
      }
      this.pm1.customDecode(in);

      if (this.speed == null) {
        this.speed = new airqo.models.speed();
      }
      this.speed.customDecode(in);

      if (this.altitude == null) {
        this.altitude = new airqo.models.altitude();
      }
      this.altitude.customDecode(in);

      if (this.battery == null) {
        this.battery = new airqo.models.battery();
      }
      this.battery.customDecode(in);

      if (this.satellites == null) {
        this.satellites = new airqo.models.satellites();
      }
      this.satellites.customDecode(in);

      if (this.hdop == null) {
        this.hdop = new airqo.models.hdop();
      }
      this.hdop.customDecode(in);

      if (this.s2_pm10 == null) {
        this.s2_pm10 = new airqo.models.s2_pm10();
      }
      this.s2_pm10.customDecode(in);

      if (this.s2_pm2_5 == null) {
        this.s2_pm2_5 = new airqo.models.s2_pm2_5();
      }
      this.s2_pm2_5.customDecode(in);

    } else {
      for (int i = 0; i < 24; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.frequency = airqo.models.frequency.values()[in.readEnum()];
          break;

        case 1:
          this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);
          break;

        case 2:
          this.device = in.readString(this.device instanceof Utf8 ? (Utf8)this.device : null);
          break;

        case 3:
          this.device_id = in.readString(this.device_id instanceof Utf8 ? (Utf8)this.device_id : null);
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.site_id = null;
          } else {
            this.site_id = in.readString(this.site_id instanceof Utf8 ? (Utf8)this.site_id : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.device_number = null;
          } else {
            this.device_number = in.readInt();
          }
          break;

        case 6:
          this.tenant = airqo.models.tenant.values()[in.readEnum()];
          break;

        case 7:
          if (this.location == null) {
            this.location = new airqo.models.location();
          }
          this.location.customDecode(in);
          break;

        case 8:
          if (this.internalTemperature == null) {
            this.internalTemperature = new airqo.models.internalTemperature();
          }
          this.internalTemperature.customDecode(in);
          break;

        case 9:
          if (this.internalHumidity == null) {
            this.internalHumidity = new airqo.models.internalHumidity();
          }
          this.internalHumidity.customDecode(in);
          break;

        case 10:
          if (this.externalTemperature == null) {
            this.externalTemperature = new airqo.models.externalTemperature();
          }
          this.externalTemperature.customDecode(in);
          break;

        case 11:
          if (this.externalHumidity == null) {
            this.externalHumidity = new airqo.models.externalHumidity();
          }
          this.externalHumidity.customDecode(in);
          break;

        case 12:
          if (this.externalPressure == null) {
            this.externalPressure = new airqo.models.externalPressure();
          }
          this.externalPressure.customDecode(in);
          break;

        case 13:
          if (this.pm10 == null) {
            this.pm10 = new airqo.models.pm10();
          }
          this.pm10.customDecode(in);
          break;

        case 14:
          if (this.pm2_5 == null) {
            this.pm2_5 = new airqo.models.pm2_5();
          }
          this.pm2_5.customDecode(in);
          break;

        case 15:
          if (this.no2 == null) {
            this.no2 = new airqo.models.no2();
          }
          this.no2.customDecode(in);
          break;

        case 16:
          if (this.pm1 == null) {
            this.pm1 = new airqo.models.pm1();
          }
          this.pm1.customDecode(in);
          break;

        case 17:
          if (this.speed == null) {
            this.speed = new airqo.models.speed();
          }
          this.speed.customDecode(in);
          break;

        case 18:
          if (this.altitude == null) {
            this.altitude = new airqo.models.altitude();
          }
          this.altitude.customDecode(in);
          break;

        case 19:
          if (this.battery == null) {
            this.battery = new airqo.models.battery();
          }
          this.battery.customDecode(in);
          break;

        case 20:
          if (this.satellites == null) {
            this.satellites = new airqo.models.satellites();
          }
          this.satellites.customDecode(in);
          break;

        case 21:
          if (this.hdop == null) {
            this.hdop = new airqo.models.hdop();
          }
          this.hdop.customDecode(in);
          break;

        case 22:
          if (this.s2_pm10 == null) {
            this.s2_pm10 = new airqo.models.s2_pm10();
          }
          this.s2_pm10.customDecode(in);
          break;

        case 23:
          if (this.s2_pm2_5 == null) {
            this.s2_pm2_5 = new airqo.models.s2_pm2_5();
          }
          this.s2_pm2_5.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










